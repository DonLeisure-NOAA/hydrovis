#!/bin/bash

POSTGRES_DATA_FOLDER="/home/ec2-user/postgres_data"

echo "---- SETTING UP EGIS DB ----"

# Setting up EGIS DB
export PGPASSWORD=${egis_db_password}

aws s3 cp "s3://${deployment_bucket}/${postgis_setup_s3_key}" "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" -f "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"
rm "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"


# Cleaning up EGIS DB - Part 1
echo "Drop EGIS Services Schema"
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" -c "DROP SCHEMA IF EXISTS services CASCADE;"

echo "Setting up services schema in the EGIS DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/egisDB_services.dump" "$${POSTGRES_DATA_FOLDER}/egisDB_services.dump"
pg_restore -h "${egis_db_host}" -p ${egis_db_port} -d "${egis_db_name}" -U ${egis_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/egisDB_services.dump"
rm "$${POSTGRES_DATA_FOLDER}/egisDB_services.dump"


echo "---- SETTING UP VIZ DB ----"

# Setting up Viz DB
export PGPASSWORD=${viz_db_password}


# Adding postgis extension and aws export extentions to Viz DB
aws s3 cp "s3://${deployment_bucket}/${postgis_setup_s3_key}" "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -f "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"
rm "$${POSTGRES_DATA_FOLDER}/postgis_setup.sql"
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "CREATE EXTENSION IF NOT EXISTS aws_s3 CASCADE;"


# Adding users to Viz DB
echo "Adding viz proc user..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "CREATE ROLE ${viz_proc_admin_rw_username};"
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "ALTER ROLE ${viz_proc_admin_rw_username} WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 2000 ENCRYPTED PASSWORD '${viz_proc_admin_rw_password}';"

echo "Adding viz dev user..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "CREATE ROLE ${viz_proc_dev_rw_username};"
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "ALTER ROLE ${viz_proc_dev_rw_username} WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 25 ENCRYPTED PASSWORD '${viz_proc_dev_rw_password}';"


# Add permissions for aws_s3 extension to viz user.
echo "Adding permissions to aws_s3 extension for viz user..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "GRANT USAGE ON schema aws_s3 TO ${viz_proc_admin_rw_username}; GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA aws_s3 TO ${viz_proc_admin_rw_username};"


# Drop Viz DB Schemas
echo "Cleaning up Viz DB..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" -c "DROP SCHEMA IF EXISTS admin CASCADE; DROP SCHEMA IF EXISTS archive CASCADE; DROP SCHEMA IF EXISTS ingest CASCADE; DROP SCHEMA IF EXISTS derived CASCADE; DROP SCHEMA IF EXISTS external CASCADE; DROP SCHEMA IF EXISTS fim CASCADE; DROP SCHEMA IF EXISTS cache CASCADE; DROP SCHEMA IF EXISTS publish CASCADE;"


# Resoring Viz DB Schema Dumps
echo "Setting up admin schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_admin.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_admin.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_admin.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_admin.dump"

echo "Setting up archive schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_archive.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_archive.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_archive.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_archive.dump"

echo "Setting up cache schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_cache.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_cache.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_cache.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_cache.dump"

echo "Setting up derived schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_derived.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_derived.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_derived.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_derived.dump"

echo "Setting up ingest schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_ingest.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_ingest.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_ingest.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_ingest.dump"

echo "Setting up publish schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_publish.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_publish.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_publish.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_publish.dump"

echo "Setting up external schema in the VIZ DB..."
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/vizDB_external.dump" "$${POSTGRES_DATA_FOLDER}/vizDB_external.dump"
pg_restore -h "${viz_db_host}" -p ${viz_db_port} -d "${viz_db_name}" -U ${viz_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/vizDB_external.dump"
rm "$${POSTGRES_DATA_FOLDER}/vizDB_external.dump"


# Adding Dev Schema to Viz DB #ToDo: Only do this in Dev / TI environments.
echo "Setting up dev schema in the VIZ DB and grant full permissions to both viz proc and dev users..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" \
    -tAc "DROP SCHEMA IF EXISTS dev CASCADE;
            CREATE SCHEMA dev;
            GRANT ALL ON SCHEMA dev TO ${viz_proc_admin_rw_username};
            GRANT ALL ON ALL TABLES IN SCHEMA dev TO ${viz_proc_admin_rw_username};
            ALTER DEFAULT PRIVILEGES IN SCHEMA dev GRANT all ON TABLES TO ${viz_proc_admin_rw_username};
            GRANT ALL ON SCHEMA dev TO ${viz_proc_dev_rw_username};
            GRANT ALL ON ALL TABLES IN SCHEMA dev TO ${viz_proc_dev_rw_username};
            ALTER DEFAULT PRIVILEGES IN SCHEMA dev GRANT all ON TABLES TO ${viz_proc_dev_rw_username};"


echo "Setting up external.usgs_gage table in the EVIZ GIS DB, ensuring postgres_fdw extension installed, and setting up foreign table wrappers..."
psql -h "${viz_db_host}" -U "${viz_db_username}" -p ${viz_db_port} -d "${viz_db_name}" \
    -tAc "CREATE EXTENSION IF NOT EXISTS postgres_fdw;
            DROP SERVER IF EXISTS wrds_location CASCADE;
            CREATE SERVER wrds_location FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '${location_db_host}', dbname '${location_db_name}', port '${location_db_port}');
            CREATE USER MAPPING FOR ${viz_db_username} SERVER wrds_location OPTIONS (user '${location_db_username}', password '${location_db_password}');
            IMPORT FOREIGN SCHEMA public LIMIT TO (usgs_gage) FROM SERVER wrds_location INTO external;"


echo "---- SETTING UP EGIS DB PART 2 ----"

# Setting up EGIS DB - Part 2

export PGPASSWORD=${egis_db_password}

# Adding foreign data wrapper-linked schema to the viz processing publish, for the transfer of published data.
echo "Setting up vizprc_publish schema in the EGIS DB, ensuring postgres_fdw extension installed, and setting up foreign table wrappers..."
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" \
    -tAc "DROP SCHEMA IF EXISTS vizprc_publish;
            CREATE SCHEMA IF NOT EXISTS vizprc_publish;
            GRANT ALL ON SCHEMA vizprc_publish TO ${egis_db_username};
            GRANT ALL ON ALL TABLES IN SCHEMA vizprc_publish TO ${egis_db_username};
            ALTER DEFAULT PRIVILEGES IN SCHEMA vizprc_publish GRANT all ON TABLES TO ${egis_db_username};

            CREATE EXTENSION IF NOT EXISTS postgres_fdw;
            DROP SERVER IF EXISTS vizprc_db CASCADE;
            CREATE SERVER vizprc_db FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '${viz_db_host}', dbname '${viz_db_name}', port '${viz_db_port}');
            CREATE USER MAPPING FOR ${egis_db_username} SERVER vizprc_db OPTIONS (user '${viz_proc_admin_rw_username}', password '${viz_proc_admin_rw_password}');
            IMPORT FOREIGN SCHEMA publish FROM SERVER vizprc_db INTO vizprc_publish;"


# Restoring EGIS Reference Schema Dumps
echo "Setting up reference schema in the EGIS DB..."
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" -c "DROP SCHEMA IF EXISTS reference CASCADE;"
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/egisDB_reference.dump" "$${POSTGRES_DATA_FOLDER}/egisDB_reference.dump"
pg_restore -h "${egis_db_host}" -p ${egis_db_port} -d "${egis_db_name}" -U ${egis_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/egisDB_reference.dump"
rm "$${POSTGRES_DATA_FOLDER}/egisDB_reference.dump"


# Restoring AEP FIM Schema Dump
echo "Setting up aep_fim schema in the EGIS DB..."
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" -c "DROP SCHEMA IF EXISTS aep_fim CASCADE;"
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/egisDB_aep_fim.dump" "$${POSTGRES_DATA_FOLDER}/egisDB_aep_fim.dump"
pg_restore -h "${egis_db_host}" -p ${egis_db_port} -d "${egis_db_name}" -U ${egis_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/egisDB_aep_fim.dump"
rm "$${POSTGRES_DATA_FOLDER}/egisDB_aep_fim.dump"


# Restoring FIM Catchments Schema Dumps
echo "Setting up fim_catchments schema in the EGIS DB..."
psql -h "${egis_db_host}" -U "${egis_db_username}" -p ${egis_db_port} -d "${egis_db_name}" -c "DROP SCHEMA IF EXISTS fim_catchments CASCADE;"
aws s3 cp "s3://${deployment_bucket}/viz_db_dumps/egisDB_fim_catchments.dump" "$${POSTGRES_DATA_FOLDER}/egisDB_fim_catchments.dump"
pg_restore -h "${egis_db_host}" -p ${egis_db_port} -d "${egis_db_name}" -U ${egis_db_username} -j 4 -v "$${POSTGRES_DATA_FOLDER}/egisDB_fim_catchments.dump"
rm "$${POSTGRES_DATA_FOLDER}/egisDB_fim_catchments.dump"